# System-wide .bashrc file for interactive bash(1) shells.

# To enable the settings / commands in this file for login shells as well,
# this file has to be sourced in /etc/profile.

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, overwrite the one in /etc/profile)
# this is done, further below to have filesystem status (ro / rw) in prompt
#PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '

# Commented out, don't overwrite xterm -T "title" -n "icontitle" by default.
# If this is an xterm set the title to user@host:dir
#case "$TERM" in
#xterm*|rxvt*)
#    PROMPT_COMMAND='echo -ne "\033]0;${USER}@${HOSTNAME}: ${PWD}\007"'
#    ;;
#*)
#    ;;
#esac

# enable bash completion in interactive shells
#if ! shopt -oq posix; then
#  if [ -f /usr/share/bash-completion/bash_completion ]; then
#    . /usr/share/bash-completion/bash_completion
#  elif [ -f /etc/bash_completion ]; then
#    . /etc/bash_completion
#  fi
#fi

# if the command-not-found package is installed, use it
if [ -x /usr/lib/command-not-found -o -x /usr/share/command-not-found/command-not-found ]; then
	function command_not_found_handle {
	        # check because c-n-f could've been removed in the meantime
                if [ -x /usr/lib/command-not-found ]; then
		   /usr/lib/command-not-found -- "$1"
                   return $?
                elif [ -x /usr/share/command-not-found/command-not-found ]; then
		   /usr/share/command-not-found/command-not-found -- "$1"
                   return $?
		else
		   printf "%s: command not found\n" "$1" >&2
		   return 127
		fi
	}
fi

# get boot and root fs
root_dev=$(mount | grep "on \/ type" | cut -d "(" -f 1 | cut -d " " -f1)
boot_dev=$(mount | grep "on \/boot type" | cut -d "(" -f 1 | cut -d " " -f1)

# set variable identifying the filesystem you work in (used in the prompt below)
fs_mode=$(mount | grep "on \/ type" | cut -d "(" -f 2 | cut -d "," -f1)

alias ro='sudo mount -o remount,ro / ; fs_mode=$(mount | grep "on \/ type" | cut -d "(" -f 2 | cut -d "," -f1)'
alias rw='sudo mount -o remount,rw / ; fs_mode=$(mount | grep "on \/ type" | cut -d "(" -f 2 | cut -d "," -f1)'
alias pwr='sudo poweroff'

# Increase volume by 5%
alias volu='sudo mount -o remount,rw / && sudo amixer set PCM -- $[$(amixer get PCM|grep -o [0-9]*%|sed 's/%//')+5]% && sudo mount -o remount,ro /'
# Decrease volume by 5%
alias vold='sudo mount -o remount,rw / && sudo amixer set PCM -- $[$(amixer get PCM|grep -o [0-9]*%|sed 's/%//')-5]% && sudo mount -o remount,ro /'


# set a fancy prompt (non-color, overwrite the one in /etc/profile) with fs mount status (ro / rw)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
        # We have color support; assume it's compliant with Ecma-48
        # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
        # a case would tend to support setf rather than setaf.)
        color_prompt=yes
    else
        color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h ${fs_mode}\[\033[00m\]:\[\033[1;34m\]\w \$\[\033[00m\] '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h ${fs_mode}:\w\$ '
fi

unset color_prompt force_color_prompt

# # # #  Provide some funny login greeting # # # # 

# first of all show the matrix, if this is the matrix PI.
if [ -x /usr/bin/cmatrix ] ; then 
   cmatrix -b -s
else
   # if this is not the matrix, show some ascii art
   if [ -f /var/asciiart/default.asc ] ; then
      cat /var/asciiart/default.asc
      sleep 1
   fi
fi

# second provide basic system information to the user
let upSeconds="$(/usr/bin/cut -d. -f1 /proc/uptime)"
let secs=$((${upSeconds}%60))
let mins=$((${upSeconds}/60%60))
let hours=$((${upSeconds}/3600%24))
let days=$((${upSeconds}/86400))
UPTIME=`printf "%d days, %02dh%02dm%02ds" "$days" "$hours" "$mins" "$secs"`

# disk size and available
diskSize=`df -h | sed -n '/root/{s/  */ /gp}' | cut -d' ' -f2`
diskUsed=`df -h | sed -n '/root/{s/  */ /gp}' | cut -d' ' -f3`
diskFree=`df -h | sed -n '/root/{s/  */ /gp}' | cut -d' ' -f4`

# now check if we have a valid network interface 
numInterfaces=`ifconfig | grep "inet " | wc -l`

# and only in this case try to get the IP-Address of it
if [ ${numInterfaces} -gt 1 ] ; then
   # get external IP
   myExtIp=`dig +short myip.opendns.com @resolver1.opendns.com`
   
   # get interanl IP Adresses
   ethExist=`/sbin/ifconfig | grep eth0`
   if [ ${#ethExist} -gt 0 ] ; then
      myEthIp=`/sbin/ifconfig eth0 | /bin/grep "inet addr" | /usr/bin/cut -d ":" -f 2 | /usr/bin/cut -d " " -f 1`
   else
      myEthIp=""
   fi
   
   wlanExist=`/sbin/ifconfig | grep wlan0`
   if [ ${#wlanExist} -gt 0 ] ; then
      myWlanIp=`/sbin/ifconfig wlan0 | /bin/grep "inet addr" | /usr/bin/cut -d ":" -f 2 | /usr/bin/cut -d " " -f 1`
   else
      myWlanIp=""
   fi

   myIpText=""
   
   #echo ${#myEthIp}
   #echo ${#myWlanIp}
   #echo ${#myExtIp}
   
   if [ ${#myEthIp} -gt 6 ] ; then
      myIpText="eth0: $myEthIp"
      #echo "eth0 ip: $myEthIp / text: $myIpText"
   fi
   if [ ${#myWlanIp} -gt 6 ] ; then
      if [ ${#myIpText} -gt 0 ] ; then
         myIpText="$myIpText / wlan: $myWlanIp"
         #echo "wlan ip: $myWlanIp / text: $myIpText"
      else
         myIpText="wlan: $myWlanIp"
         #echo "wlan ip: $myWlanIp / text: $myIpText"
      fi
   fi
   
   if [ ${#myExtIp} -gt 6 ] ; then
      if [ ${#myIpText} -gt 0 ] ; then
         myIpText="$myIpText / external: $myExtIp"
         #echo "ext ip: $myExtIp / text: $myIpText"
      else
         myIpText="external: $myExtIp"
         #echo "ext ip: $myExtIp / text: $myIpText"
      fi
   fi

   # get geo location and weather - also only works in case we have at least one real network interface
   curCountry=`geoiplookup -f /usr/share/GeoIP/GeoLiteCity.dat ${myExtIp} | cut -d ":" -f 2 | cut -d "," -f 1 | cut -d " " -f 2`
   #curContinent=`geoiplookup -f /usr/share/GeoIP/GeoLiteCity.dat ${myExtIp} | cut -d ":" -f 2 | cut -d "," -f 1 | cut -d " " -f 2`
   curContinent="EUR"
   curCity=`geoiplookup -f /usr/share/GeoIP/GeoLiteCity.dat ${myExtIp} | cut -d ":" -f 2 | cut -d "," -f 3 | cut -d " " -f 2`
   myAutomaticCity=`geoiplookup -f /usr/share/GeoIP/GeoLiteCity.dat ${myExtIp} | cut -d ":" -f 2 | cut -d "," -f 1,4,5`
   myLongitude=`geoiplookup -f /usr/share/GeoIP/GeoLiteCity.dat ${myExtIp} | cut -d ":" -f 2 | cut -d "," -f 6`
   myLatitude=`geoiplookup -f /usr/share/GeoIP/GeoLiteCity.dat ${myExtIp} | cut -d ":" -f 2 | cut -d "," -f 7`

   # get weather
   curAutoWeather=`curl -s "http://rss.accuweather.com/rss/liveweather_rss.asp?metric=1&locCode=${curContinent}|${curCountry}|${curCountry}|${curCity}|" | sed -n '/Currently:/ s/.*: \(.*\): \([0-9]*\)\([CF]\).*/\2°\3, \1/p'`
   curHanWeather=`curl -s "http://rss.accuweather.com/rss/liveweather_rss.asp?metric=1&locCode=EUR|DE|DE|HANNOVER|" | sed -n '/Currently:/ s/.*: \(.*\): \([0-9]*\)\([CF]\).*/\2°\3, \1/p'`

else
   myIpText="no network"
   curAutoWeather="unknown"
   curHanWeather="unknown"
   myAutomaticCity="unknown"
fi

# get the load averages
read one five fifteen rest < /proc/loadavg

echo "$(tput setaf 2)
   .~~.   .~~.     `date +"%A, %e %B %Y, %r"`
  '. \ ' ' / .'    `uname -srmo`$(tput setaf 1)
   .~ .~~~..~.     
  : .~.'~'.~. :    Uptime.............: ${UPTIME}
 ~ (   ) (   ) ~   Memory.............: `cat /proc/meminfo | grep MemFree | awk {'print $2'}`kB (Free) / `cat /proc/meminfo | grep MemTotal | awk {'print $2'}`kB (Total)
( : '~'.~.'~' : )  Load Averages......: ${one}, ${five}, ${fifteen} (1, 5, 15 min)
 ~ .~ (   ) ~. ~   Running Processes..: `ps ax | wc -l | tr -d " "`
  (  : '~' :  )    IP Addresses.......: ${myIpText}
   '~ .~~~. ~'     Disk space root-FS.: mode: ${fs_mode} / size: ${diskSize} / used: ${diskUsed} / free: ${diskFree}
       '~'         
$(tput setaf 3)
Weather in Hannover is ${curHanWeather}
Weather at loation ${myAutomaticCity} (retrieved via external IP ${myExtIp}) is ${curAutoWeather}
$(tput setaf 4)
Welcome to `hostname`. 
$(tput sgr0)"
